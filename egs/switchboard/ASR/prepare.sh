#!/usr/bin/env bash 
# new prepare.sh
set -eou pipefail

nj=15
stage=0
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/Switchdboard
#      You can create link from /export/corpora3/LDC/LDC97S62/swb1 
#
#  - $dl_dir/lm
#      This directory contains the following files copied from
#        - sw1.o3g.kn.gz 
#        - sw1.o4g.kn.gz
#        - lexicon.txt (from https://www.openslr.org/resources/5/sw-ms98-dict.text ***proper nouns section uppercased***)
#
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  5000
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le -1 ] && [ $stop_stage -ge -1 ]; then
  log "stage -1: Download switchborad transcript and word_alignments"
  wget http://www.openslr.org/resources/5/switchboard_word_alignments.tar.gz --directory-prefix=$dl_dir
  tar -xf $dl_dir/switchboard_word_alignments.tar.gz --directory $dl_dir
  
  
fi

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "stage 0: Link data and create 3-gram & 4-gram lm"
     ln -sfv /export/corpora3/LDC/LDC97S62/swb1 $dl_dir/Switchboard
     ln -sfv /export/corpora3/LDC/LDC97S62 ./Switchboard #TODO: fix compute_fbank assume this path
     local/swbd1_prepare_dict.sh
     ./local/swbd1_data_prep.sh Switchboard
      local/swbd1_train_lms.sh data/local/train/text \
                           data/local/dict_nosp/lexicon.txt data/local/lm
     cat data/local/dict_nosp/lexicon.txt |grep "^[A-Za-z]" > data/local/lm/lexicon.txt
     gunzip data/local/lm/sw1.o3g.kn.gz
     gunzip data/local/lm/sw1.o4g.kn.gz
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare Switchboard manifest"
 # We assume that you have downloaded the LibriSpeech corpus
  # to $dl_dir/LibriSpeech
  mkdir -p data/manifests
  lhotse prepare switchboard --absolute-paths true $dl_dir/Switchboard data/manifests
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Compute fbank for librispeech"
  mkdir -p data/fbank
  ./local/compute_fbank_swbd.py
fi


if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Prepare phone based lang"
  mkdir -p data/lang_phone

  (echo '!SIL SIL'; echo '<SPOKEN_NOISE> SPN'; echo '<UNK> SPN'; ) |
    cat - data/local/lm/lexicon.txt |
    sort | uniq > data/lang_phone/lexicon.txt

  if [ ! -f data/lang_phone/L_disambig.pt ]; then
    ./local/prepare_lang.py
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "State 4: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir
    # We reuse words.txt from phone based lexicon
    # so that the two can share G.pt later.
    cp data/lang_phone/words.txt $lang_dir

    if [ ! -f $lang_dir/train.txt ]; then
      log "Generate data for BPE training"
      files=$(
        find ${dl_dir}"/swb_ms98_transcriptions" -name "*trans.text"
      )
      for f in ${files[@]}; do
        cat $f | cut -d " " -f 2-
      done > $lang_dir/train.txt
    fi

    ./local/train_bpe_model.py \
      --lang-dir $lang_dir \
      --vocab-size $vocab_size

    if [ ! -f $lang_dir/L_disambig.pt ]; then
      ./local/prepare_lang_bpe.py --lang-dir $lang_dir
    fi
  done
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Prepare G"
  # We assume you have install kaldilm, if not, please install
  # it using: pip install kaldilm

  mkdir -p data/lm
  if [ ! -f data/lm/G_3_gram.fst.txt ]; then
    # It is used in building HLG
    python3 -m kaldilm \
      --read-symbol-table="data/lang_phone/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      data/local/lm/sw1.o3g.kn > data/lm/G_3_gram.fst.txt
  fi

  if [ ! -f data/lm/G_4_gram.fst.txt ]; then
    # It is used for LM rescoring
    python3 -m kaldilm \
      --read-symbol-table="data/lang_phone/words.txt" \
      --disambig-symbol='#0' \
      --max-order=4 \
      data/local/lm/sw1.o4g.kn > data/lm/G_4_gram.fst.txt
  fi
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: Compile HLG"
  ./local/compile_hlg.py --lang-dir data/lang_phone

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    ./local/compile_hlg.py --lang-dir $lang_dir
  done
fi
if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: prepare Eval 2000"
  ln -sfv /export/corpora5/LDC/LDC2002T43/reference/english $dl_dir/eval2000_trans
  ln -sfv /export/corpora3/LDC/LDC2002S09/hub5e_00/english $dl_dir/eval2000
  ./eval2000.py
  ./compute_fbank_eval2000.py
fi


#cd data && ln -sfv lang_bpe_5000 lang_bpe